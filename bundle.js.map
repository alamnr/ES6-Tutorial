{"version":3,"sources":["first.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;AAiBA;AACA;;AAEA;;;;AAIA;;;;;;;;;AASA;;;;;;;;;AASA;AACA;;;;;;;;;AASA;;;AAGA;AACA;;;;;AAKA;;;;;;;;;;;;AAYA;;AAEA;;;;;;;AAOA;;;;;;AAMA;;;;;;AAMA;;AAEA;;;;;;;;;;;;;;;;;;;;;AAsBA;;IAEM,I;AACF,kBAAY,IAAZ,EAAkB,MAAlB,EAAyB;AAAA;;AACrB,aAAK,IAAL,GAAU,QAAQ,cAAlB;AACA,aAAK,MAAL,GAAY,UAAU,gBAAtB;AACH;;;;oCACU;AACP,oBAAQ,GAAR,CAAY,YAAU,KAAK,IAA3B;AACH;;;sCACY;AACT,oBAAQ,GAAR,CAAY,cAAY,KAAK,MAA7B;AACH;;;;;;AAGL;;AAEA;AACA;;;AAMA;;IAEM,M;;;AACF,oBAAY,IAAZ,EAAiB,MAAjB,EAAwB,KAAxB,EAA8B;AAAA;;AAAA,oHACpB,IADoB,EACf,MADe;;AAE1B,cAAK,KAAL,GAAW,SAAO,eAAlB;AAF0B;AAG7B;;;;oCAEU;AACP,oBAAQ,GAAR,CAAY,qBAAZ;AAEH;;;qCACW;AACR,oBAAQ,GAAR,CAAY,WAAU,KAAK,KAA3B;AACH;;;;EAZgB,I;;AAerB,IAAI,SAAS,IAAI,MAAJ,CAAW,UAAX,EAAsB,MAAtB,EAA6B,WAA7B,CAAb;;AAEA,OAAO,SAAP;AACA,OAAO,WAAP;AACA,OAAO,UAAP;;AASA;;AAEA,IAAM,uBAAuB,2BAA7B;;AAEA;AACA,QAAQ,GAAR,CAAY,oBAAZ;;AAIA,IAAI,OAAO,EAAC,KAAI,KAAL,EAAX;;AAEA,IAAM,MAAM,IAAZ;;AAEA,IAAI,IAAJ,GAAS,QAAT;;AAEA,KAAK,IAAL,GAAU,SAAV;;AAEA,QAAQ,GAAR,CAAY,GAAZ;AACA;;;AAIA;;AAEA;;;AAGA;;AAEA;;;;;AAKA,SAAS,uBAAT,GAAsC;AAAA,QAAL,CAAK,uEAAH,CAAG;;AAClC,YAAQ,GAAR,CAAY,IAAI,EAAhB,EADkC,CACb;AACxB;;AAED;AACA;;AAKA","file":"bundle.js","sourcesContent":["/*###############   Without var polute the global scope  ########### */\r\n\r\n//var x=[1,2,3,4];\r\n\r\n//y=\"this is a script\";\r\n\r\n/*###############   Block scope let variable \r\n\r\n(JavaScript Versus ECMAScript\r\nECMAScript is the official name for JavaScript. A new name became necessary because\r\nthere is a trademark on Java (held originally by Sun, now by Oracle). At the moment,\r\nMozilla is one of the few companies allowed to officially use the name JavaScript because\r\nit received a license long ago. For common usage, the following rules apply:\r\n• JavaScript means the programming language.\r\n• ECMAScript is the name used by the language specification. Therefore, whenever\r\nreferring to versions of the language, people say ECMAScript. The current version\r\nof JavaScript is ECMAScript 5; ECMAScript 6 is currently being developed.\r\nInfluences and Nature of the Language\r\nJavaScript’s creator, Brendan Eich, had no choice but to create the language very quickly\r\n(or other, worse technologies would have been adopted by Netscape). He borrowed from\r\nseveral programming languages: Java (syntax, primitive values versus objects), Scheme\r\n\r\nand AWK (first-class functions), Self (prototypal inheritance), and Perl and Python\r\n(strings, arrays, and regular expressions).\r\nJavaScript did not have exception handling until ECMAScript 3, which explains why\r\nthe language so often automatically converts values and so often fails silently: it initially\r\ncouldn’t throw exceptions.\r\nOn one hand, JavaScript has quirks and is missing quite a bit of functionality (block-\r\nscoped variables, modules, support for subclassing, etc.). On the other hand, it has\r\nseveral powerful features that allow you to work around these problems. In other lan‐\r\nguages, you learn language features. In JavaScript, you often learn patterns instead.\r\nGiven its influences, it is no surprise that JavaScript enables a programming style that\r\nis a mixture of functional programming (higher-order functions; built-in map, reduce,\r\netc.) and object-oriented programming (objects, inheritance).\r\n    \r\n    ######################## */\r\n\r\n/*\r\nvar ourFunction = function(){\r\n\r\n    //var x = 'This is in function scope'\r\n    let x = 'This is in function scope'\r\n\r\n    if(true){\r\n        //var x= 'This is in block scope'\r\n        let x= 'This is in block scope'\r\n        console.log(x)\r\n    }\r\n    console.log(x)\r\n}\r\n\r\nourFunction()\r\n*/\r\n\r\n/*###############   Spread Operator  ######################## */\r\n//var awesomeBands =  ['Bayside','Senses fail'];\r\n\r\n/*\r\nvar bands = ['Rammstein', 'Silverstein',...awesomeBands];\r\nconsole.log(bands); */\r\n\r\n/*\r\nvar badFunction = function(...args){\r\n    for (var x=0;x<args.length;x++){\r\n        console.log(args[x]);\r\n    }\r\n}\r\n\r\nbadFunction(...awesomeBands);*/\r\n\r\n/*\r\nvar badFunction = function(){\r\n    for (var x=0;x<arguments.length;x++){\r\n        console.log(arguments[x]);\r\n    }\r\n}\r\n\r\nbadFunction(...awesomeBands);*/\r\n\r\n/*###############   Destructuring Assignment  ######################## */\r\n/*\r\nvar a,b,rest;\r\n\r\n//[a,b,...rest] = [1,2,3,4,5,6,7,8,9];\r\n\r\n[a,b] = [1,2,3,4,5,6,7,8,9];\r\n\r\nconsole.log(a);\r\nconsole.log(b);*/\r\n//console.log(rest);\r\n\r\n\r\n/*###############   Shorthand object Creation  ######################## */\r\n/*\r\nvar myObj ={x:'hey', y:'you'};\r\n\r\nconsole.log(myObj.x);*/\r\n\r\n/*\r\nvar name = 'Ramm';\r\n\r\nvar origin = 'Germany';\r\n\r\nvar genre = 'Rock';\r\n\r\nvar obj = {name, origin,genre};\r\n\r\nconsole.log(obj);\r\n*/\r\n\r\n/*###############   Arrow Function  ######################## */\r\n\r\n/* var oldWay =  function(){\r\n    alert('Hello World');\r\n}\r\n\r\n//oldWay();\r\noldWay.apply(this);  */\r\n\r\n/* var arrowFunction = () => {\r\n    alert('Hello from an arrow function');\r\n}\r\n\r\narrowFunction(); */\r\n\r\n/* var arrowFunction = (arg1, arg2) => {\r\n    alert(arg1 +' '+arg2);\r\n}\r\n\r\narrowFunction('This is arg1' , 'This is arg2'); */\r\n\r\n/*###############   Template Literals  ######################## */\r\n\r\n/* \r\nvar band='Bayside';\r\n\r\nvar longString = `this is a long string\r\nthis is a long string\r\nthis is a long string\r\nBand Name=${band}\r\nthis is a long string\r\nthis is a long string`;\r\n\r\nconsole.log(longString);\r\n\r\nvar longFunction = (bandName,around)=>{\r\n    return `\r\n    ${bandName} is a rock band that has been around\r\n    since ${around+5} years\r\n    `\r\n   }\r\n   \r\n   console.log(longFunction(band,10)); */\r\n\r\n\r\n/*###############   Classes  ######################## */\r\n\r\nclass Band{\r\n    constructor(name, origin){\r\n        this.name=name || 'default name';\r\n        this.origin=origin || 'default origin';\r\n    }\r\n    printName(){\r\n        console.log('Name = '+this.name);\r\n    }\r\n    printOrigin(){\r\n        console.log('Origin = '+this.origin);\r\n    }\r\n}\r\n\r\n//var baySide = new Band('Bayside','New York');\r\n\r\n//baySide.printName();\r\n//baySide.printOrigin();\r\n\r\n\r\n\r\n\r\n\r\n/*###############   Sub-Classing and Super()  ######################## */\r\n\r\nclass Member extends Band{\r\n    constructor(name,origin,genre){\r\n        super(name,origin);\r\n        this.genre=genre||'default genre';\r\n    }\r\n\r\n    printName(){\r\n        console.log('This is an override');\r\n\r\n    }\r\n    printGenre(){\r\n        console.log('Genre-'+ this.genre);\r\n    }\r\n}\r\n\r\nvar member = new Member('Bay side','test','Pure Fuck');\r\n\r\nmember.printName();\r\nmember.printOrigin();\r\nmember.printGenre();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*###############   Const   ######################## */\r\n\r\nconst constValueIsReadOnly = 'You can not reassign this' ;\r\n\r\n//constValueIsReadOnly ='reassigned';\r\nconsole.log(constValueIsReadOnly);\r\n\r\n\r\n\r\nvar test = {foo:'bar'};\r\n\r\nconst obj = test;\r\n\r\nobj.fuck='in ass';\r\n\r\ntest.suck='my dick';\r\n\r\nconsole.log(obj);\r\n//obj = {};\r\n\r\n\r\n\r\n/*###############   Using source map for debugging  ######################## */\r\n\r\n//   \\ES6_Tutorial>npm run babel -- first.js -o bundle.js -w --source-maps\r\n\r\n\r\n/*###############   Default Argument  ######################## */\r\n\r\n/* \r\nfunction defaultArgumentFunction(a) {\r\n    console.log(a + 10); // prints NaN since a is undefined\r\n} */\r\n\r\nfunction defaultArgumentFunction(a=0) {\r\n    console.log(a + 10); // prints NaN since a is undefined\r\n}\r\n\r\ndefaultArgumentFunction();\r\n/*###############   New For loop  ######################## */\r\n\r\n\r\n\r\n\r\n/*###############   Module Loading  ######################## */"]}